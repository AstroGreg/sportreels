{"ast":null,"code":"var _jsxFileName = \"/Users/gregreynders/sportreals/react-tik-tok-scroll/src/components/Video/Video.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport VideoFooter from \"../VideoFooter/VideoFooter\";\nimport VideoSidebar from \"../VideoSidebar/VideoSidebar\"; // import useVideoPlayer from \"../../hooks/useVideoPlayer\";\n\nimport ReactPlayer from \"react-player\";\nimport Note from \"../Note/Note\"; // import QuizOptions from \"../QuizOptions/QuizOptions\";\n// import { QuizReelContext } from \"../../contexts/QuizReelContext\";\n\nimport \"./Video.css\";\n\nfunction Video({\n  url,\n  description,\n  quizOptions,\n  displayQuizTimestampInt,\n  hasQuiz,\n  title,\n  index,\n  displayQuizTimestampString\n}) {\n  const videoRef = useRef(null);\n  const [playerState, setPlayerState] = useState({\n    playing: false,\n    volume: 0.01,\n    muted: false,\n    played: 0,\n    loaded: 0,\n    loadedSeconds: 0,\n    playbackRate: 1.0,\n    loop: true,\n    isQuizDisplayed: false,\n    videoElement: null,\n    seeking: false,\n    playedSeconds: 0\n  });\n  const [displayQuiz, setDisplayQuiz] = useState(false);\n  const [isOptionSelected, setIsOptionSelected] = useState(false);\n  const [note, setNote] = useState({\n    active: false,\n    title: \"title\",\n    description: \"description\",\n    timestamp: \"\"\n  });\n  useEffect(() => {\n    const elem = document.querySelector(\"#video0\");\n    elem.addEventListener(\"scroll\", () => {\n      console.log(\"scroll event fired!\"); // Y\n      // const y = videoRef.current;\n\n      console.log(elem.getBoundingClientRect());\n    });\n  }, [videoRef]);\n\n  const handlePlayPause = () => {\n    setPlayerState({ ...playerState,\n      playing: !playerState.playing\n    });\n  };\n\n  const handleSkipTo = e => {\n    const manualNumberInDecimal = parseFloat(e.target.value) / 100;\n    console.log(\"manualNumberInDecimal\", manualNumberInDecimal);\n    videoRef.current.seekTo(manualNumberInDecimal, \"fraction\");\n    setPlayerState(prevPlayerState => ({ ...prevPlayerState,\n      played: manualNumberInDecimal\n    }));\n  };\n\n  const handleProgress = state => {\n    // console.log(\"onProgress\", state);\n    if (hasQuiz) {\n      if (parseInt(playerState.playedSeconds) === parseInt(displayQuizTimestampInt) && playing) {\n        setDisplayQuiz(true);\n        handlePause();\n      } else {\n        setPlayerState(prevPlayerState => ({ ...prevPlayerState,\n          ...state\n        }));\n      }\n    } else {\n      setPlayerState(prevPlayerState => ({ ...prevPlayerState,\n        ...state\n      }));\n    }\n  };\n\n  const handlePlay = () => {\n    // console.log(\"onPlay\");\n    setPlayerState({ ...playerState,\n      playing: true\n    });\n  };\n\n  const handlePause = () => {\n    // console.log(\"onPause\");\n    setPlayerState({ ...playerState,\n      playing: false\n    });\n  };\n\n  const handleMuteUnmute = () => {\n    setPlayerState({ ...playerState,\n      muted: !playerState.muted\n    });\n  };\n\n  const handleTakeNote = () => {\n    console.log(\"Taking note at: \", playerState.playedSeconds, title, description);\n    handlePause();\n    const timestamp = new Date(playerState.playedSeconds * 1000).toISOString().slice(14, 19);\n    setNote({ ...note,\n      active: true,\n      title,\n      description,\n      timestamp\n    });\n  };\n\n  const handleCloseNote = () => {\n    setNote({ ...note,\n      active: false\n    });\n  };\n\n  const handleQuizOptionSelect = (index, quizOptions) => {\n    console.log(index, quizOptions.redirectTimestamps[index]);\n    const myArray = quizOptions.redirectTimestamps[index].split(\":\");\n    const manualChange = Number(myArray[0]) * 60 + Number(myArray[1]);\n    const updatedTimeFraction = manualChange / playerState.loadedSeconds;\n    console.log(\"updatedTimeFraction\", updatedTimeFraction, manualChange);\n    videoRef.current.seekTo(updatedTimeFraction, \"fraction\");\n    setPlayerState(prevPlayerState => ({ ...prevPlayerState,\n      played: updatedTimeFraction,\n      playing: true\n    }));\n    setDisplayQuiz(false);\n    setIsOptionSelected(true);\n  };\n\n  const {\n    playing,\n    volume,\n    muted,\n    loop,\n    played,\n    playbackRate\n  } = playerState;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"video\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"video_click\",\n    onClick: () => handlePlayPause(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, note.active && /*#__PURE__*/React.createElement(Note, {\n    note: note,\n    handleCloseNote: handleCloseNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(ReactPlayer, {\n    id: \"video\" + index,\n    ref: videoRef,\n    className: \"video__player\",\n    url: url,\n    playing: playing && !note.active,\n    width: \"100%\",\n    height: \"100%\",\n    playsinline: true,\n    loop: loop,\n    playbackRate: playbackRate,\n    volume: volume,\n    muted: muted // onReady={() => console.log(\"onReady\")}\n    // onStart={() => console.log(\"onStart\")}\n    ,\n    onPlay: handlePlay,\n    onPause: handlePause // onBuffer={() => setBuffer(true)}\n    // onPlaybackRateChange={handleOnPlaybackRateChange}\n    // onSeek={(e) => console.log(\"onSeek\", e)}\n    // onEnded={handleEnded}\n    // onError={(e) => console.log(\"onError\", e)}\n    ,\n    onProgress: e => handleProgress(e, displayQuizTimestampInt) // onDuration={handleDuration}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"videofooter\",\n    type: \"range\",\n    style: {\n      backgroundSize: `${played * 100}%`\n    },\n    min: \"0\",\n    max: \"100\",\n    step: \"any\",\n    value: played * 100,\n    onChange: e => {\n      handleSkipTo(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }), !playing ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(VideoFooter, {\n    title: title,\n    description: description,\n    displayQuiz: displayQuiz,\n    quizOptions: hasQuiz ? quizOptions : [],\n    handleQuizOptionSelect: hasQuiz ? handleQuizOptionSelect : null,\n    isOptionSelected: isOptionSelected,\n    hasQuiz: hasQuiz !== null && hasQuiz !== void 0 ? hasQuiz : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  })) : null, /*#__PURE__*/React.createElement(VideoSidebar, {\n    muted: muted,\n    handleMuteUnmute: handleMuteUnmute,\n    playing: playing,\n    handleTakeNote: handleTakeNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Video; // {pauseVideo === parseInt(playerState.progress) ? (\n//   <>\n//     <VideoFooter\n//       channel={channel}\n//       description={description}\n//       song={song}\n//     />\n//     {/**/}\n//     <VideoSidebar quizOptions={quizOptions} videoRef={videoRef} />\n//   </>\n// ) : null}\n// {!playerState.isPlaying ? (\n//   <>\n//     <VideoFooter channel={channel} description={description} />\n//     <VideoSidebar quizOptions={quizOptions} videoRef={videoRef} />\n//   </>\n// ) : null}","map":{"version":3,"sources":["/Users/gregreynders/sportreals/react-tik-tok-scroll/src/components/Video/Video.js"],"names":["React","useEffect","useRef","useState","VideoFooter","VideoSidebar","ReactPlayer","Note","Video","url","description","quizOptions","displayQuizTimestampInt","hasQuiz","title","index","displayQuizTimestampString","videoRef","playerState","setPlayerState","playing","volume","muted","played","loaded","loadedSeconds","playbackRate","loop","isQuizDisplayed","videoElement","seeking","playedSeconds","displayQuiz","setDisplayQuiz","isOptionSelected","setIsOptionSelected","note","setNote","active","timestamp","elem","document","querySelector","addEventListener","console","log","getBoundingClientRect","handlePlayPause","handleSkipTo","e","manualNumberInDecimal","parseFloat","target","value","current","seekTo","prevPlayerState","handleProgress","state","parseInt","handlePause","handlePlay","handleMuteUnmute","handleTakeNote","Date","toISOString","slice","handleCloseNote","handleQuizOptionSelect","redirectTimestamps","myArray","split","manualChange","Number","updatedTimeFraction","backgroundSize"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport VideoFooter from \"../VideoFooter/VideoFooter\";\nimport VideoSidebar from \"../VideoSidebar/VideoSidebar\";\n// import useVideoPlayer from \"../../hooks/useVideoPlayer\";\nimport ReactPlayer from \"react-player\";\nimport Note from \"../Note/Note\";\n// import QuizOptions from \"../QuizOptions/QuizOptions\";\n// import { QuizReelContext } from \"../../contexts/QuizReelContext\";\n\nimport \"./Video.css\";\n\nfunction Video({\n  url,\n  description,\n  quizOptions,\n  displayQuizTimestampInt,\n  hasQuiz,\n  title,\n  index,\n  displayQuizTimestampString,\n}) {\n  const videoRef = useRef(null);\n  const [playerState, setPlayerState] = useState({\n    playing: false,\n    volume: 0.01,\n    muted: false,\n    played: 0,\n    loaded: 0,\n    loadedSeconds: 0,\n    playbackRate: 1.0,\n    loop: true,\n    isQuizDisplayed: false,\n    videoElement: null,\n    seeking: false,\n    playedSeconds: 0,\n  });\n  const [displayQuiz, setDisplayQuiz] = useState(false);\n  const [isOptionSelected, setIsOptionSelected] = useState(false);\n  const [note, setNote] = useState({\n    active: false,\n    title: \"title\",\n    description: \"description\",\n    timestamp: \"\",\n  });\n\n  useEffect(() => {\n    const elem = document.querySelector(\"#video0\");\n    elem.addEventListener(\"scroll\", () => {\n      console.log(\"scroll event fired!\");\n      // Y\n      // const y = videoRef.current;\n      console.log(elem.getBoundingClientRect());\n    });\n  }, [videoRef]);\n\n  const handlePlayPause = () => {\n    setPlayerState({ ...playerState, playing: !playerState.playing });\n  };\n  const handleSkipTo = (e) => {\n    const manualNumberInDecimal = parseFloat(e.target.value) / 100;\n    console.log(\"manualNumberInDecimal\", manualNumberInDecimal);\n    videoRef.current.seekTo(manualNumberInDecimal, \"fraction\");\n    setPlayerState((prevPlayerState) => ({\n      ...prevPlayerState,\n      played: manualNumberInDecimal,\n    }));\n  };\n\n  const handleProgress = (state) => {\n    // console.log(\"onProgress\", state);\n    if (hasQuiz) {\n      if (\n        parseInt(playerState.playedSeconds) ===\n          parseInt(displayQuizTimestampInt) &&\n        playing\n      ) {\n        setDisplayQuiz(true);\n        handlePause();\n      } else {\n        setPlayerState((prevPlayerState) => ({ ...prevPlayerState, ...state }));\n      }\n    } else {\n      setPlayerState((prevPlayerState) => ({ ...prevPlayerState, ...state }));\n    }\n  };\n\n  const handlePlay = () => {\n    // console.log(\"onPlay\");\n    setPlayerState({ ...playerState, playing: true });\n  };\n\n  const handlePause = () => {\n    // console.log(\"onPause\");\n    setPlayerState({ ...playerState, playing: false });\n  };\n\n  const handleMuteUnmute = () => {\n    setPlayerState({ ...playerState, muted: !playerState.muted });\n  };\n\n  const handleTakeNote = () => {\n    console.log(\n      \"Taking note at: \",\n      playerState.playedSeconds,\n      title,\n      description\n    );\n    handlePause();\n    const timestamp = new Date(playerState.playedSeconds * 1000).toISOString().slice(14, 19);\n    setNote({\n      ...note,\n      active: true,\n      title,\n      description,\n      timestamp\n    });\n  };\n  const handleCloseNote = () => {\n    setNote({ ...note, active: false });\n  };\n\n  const handleQuizOptionSelect = (index, quizOptions) => {\n    console.log(index, quizOptions.redirectTimestamps[index]);\n    const myArray = quizOptions.redirectTimestamps[index].split(\":\");\n    const manualChange = Number(myArray[0]) * 60 + Number(myArray[1]);\n    const updatedTimeFraction = manualChange / playerState.loadedSeconds;\n    console.log(\"updatedTimeFraction\", updatedTimeFraction, manualChange);\n    videoRef.current.seekTo(updatedTimeFraction, \"fraction\");\n    setPlayerState((prevPlayerState) => ({\n      ...prevPlayerState,\n      played: updatedTimeFraction,\n      playing: true,\n    }));\n    setDisplayQuiz(false);\n    setIsOptionSelected(true);\n  };\n\n  const { playing, volume, muted, loop, played, playbackRate } = playerState;\n\n  return (\n    <div className=\"video\">\n      <div className=\"video_click\" onClick={() => handlePlayPause()}>\n        {note.active && <Note note={note} handleCloseNote={handleCloseNote} />}\n        <ReactPlayer\n          id={\"video\" + index}\n          ref={videoRef}\n          className=\"video__player\"\n          url={url}\n          playing={playing && !note.active}\n          width={\"100%\"}\n          height={\"100%\"}\n          playsinline={true}\n          loop={loop}\n          playbackRate={playbackRate}\n          volume={volume}\n          muted={muted}\n          // onReady={() => console.log(\"onReady\")}\n          // onStart={() => console.log(\"onStart\")}\n          onPlay={handlePlay}\n          onPause={handlePause}\n          // onBuffer={() => setBuffer(true)}\n          // onPlaybackRateChange={handleOnPlaybackRateChange}\n          // onSeek={(e) => console.log(\"onSeek\", e)}\n          // onEnded={handleEnded}\n          // onError={(e) => console.log(\"onError\", e)}\n          onProgress={(e) => handleProgress(e, displayQuizTimestampInt)}\n          // onDuration={handleDuration}\n        />\n      </div>\n      <input\n        className=\"videofooter\"\n        type=\"range\"\n        style={{ backgroundSize: `${played * 100}%` }}\n        min=\"0\"\n        max=\"100\"\n        step=\"any\"\n        value={played * 100}\n        onChange={(e) => {\n          handleSkipTo(e);\n        }}\n      />\n      {!playing ? (\n        <>\n          <VideoFooter\n            title={title}\n            description={description}\n            displayQuiz={displayQuiz}\n            quizOptions={hasQuiz ? quizOptions : []}\n            handleQuizOptionSelect={hasQuiz ? handleQuizOptionSelect : null}\n            isOptionSelected={isOptionSelected}\n            hasQuiz={hasQuiz ?? false}\n          />\n        </>\n      ) : null}\n\n      <VideoSidebar\n        muted={muted}\n        handleMuteUnmute={handleMuteUnmute}\n        playing={playing}\n        handleTakeNote={handleTakeNote}\n      />\n    </div>\n  );\n}\n\nexport default Video;\n\n// {pauseVideo === parseInt(playerState.progress) ? (\n//   <>\n//     <VideoFooter\n//       channel={channel}\n//       description={description}\n//       song={song}\n//     />\n//     {/**/}\n//     <VideoSidebar quizOptions={quizOptions} videoRef={videoRef} />\n//   </>\n// ) : null}\n\n// {!playerState.isPlaying ? (\n//   <>\n//     <VideoFooter channel={channel} description={description} />\n//     <VideoSidebar quizOptions={quizOptions} videoRef={videoRef} />\n//   </>\n// ) : null}\n"]},"metadata":{},"sourceType":"module"}